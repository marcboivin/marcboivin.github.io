[{"categories":null,"content":"So as of writing, if you search “please” in the emojis search bar on teams, you will find a womenbowing emojis. Feels wrong doesn’t it?\n","description":"","tags":null,"title":"Microsoft Did a Sexism… maybe?","uri":"/post/microsoft-did-a-sexism/"},{"categories":null,"content":"I have something in mind Like many before me, being in IT for some time and having an interest in a more just and fair society, I see what’s happening in my, and many other’s, government and I want to change things.\nThis is it. What this is is not yet clear to me, how realistic it is I don’t know either. It’s just my unified thinking on IT, the public good, reality as I see it and my down to earth sense of “optimism is the fuel and the poison of IT projects.”\nBackground: There is a theory about why we build IT From a philosophical point of view, ordinate systems rose from the need to organize more and more stuff. We did not invent them before the need. So it goes that we build more and more complex system because the requirement is there and not just to indulge some geek’s desire to come up with the need for a new storage system or a new programming language.\nThough debatable, idea behind it that we have requirements and we try to solve them by basically try and error really speaks to me.\nIt does underline some inherent problems :\nThe winning solution often emerges from being the first solution that clears the absolute lowest bar It almost never comes with a sustainable model for maintenance and governance over the long run It is almost always enterprise driven so the desire to keep the solution alice stems from capital gain and not the fulfillment of the greater good. First : Repositioning ROI for public services At face value, the best solution is the one that offers best value per effort spent. I would argue that Return On Investment (ROI) for the public good is not the same as for private enterprise.\nYour basic public system is supposed to last decades, serve all your people and be able to provide transparency and and guidance for governing bodies and the population as a whole.\nIncluded in the public good ROI is, of course, cost. Everyone has costs on their radar, but in the private enterprise you can always try and convince investor that pivoting or ditching something will make a better ROI on the investor’s bottom line in the end.\nNot so for the public good. We, the people, still need to have the opportunity to invest heavily on core projects that will have the equivalent benefit of more cash down the road, redefined for modern democracy.\nSo Where do we put the target? We need targets, that’s just a fact. Conventional wisdom tells us SMART is a good thing. Let’s not get into the weeds, but I’ll admit that having a goal you can measure is a good thing.\nSo what is the investment? Let’s start with :\nMoney Time The common good The reputation of the leaders behind whatever this is Government doesn’t have a strong GRP While I might be biased, ERP (Enterprise Resource Planning) being the thing I do day in and day out, the P part of ERP is what most administrative layers do in any public service.\nResources being incredibly scares on the public side of things, planning those things seems to be a no-brainer.\nI think E is where things go amiss. Modern ERPs are incredibly complex pieces of software. People argue over wether they bring\nStandardization of core components My experience is that standardization is a good thing, but we always try to standardize a couple of steps too far. On the other hand if you’re framework is too vague, nodoby uses it and it sits on the table and in an XKCD comic.\nThe one thing I think I bring to the table is that the core component of any government body is the service provided.\nWhere do I see private enterprise in this There needs to be pressure to do anything in life. Pressure is easily achieve by competition and prizes. Regular enterprise is motivated by making money. Let’s not mess with success, but this should be sustaining implementation and not development.\nWell tell a lie, by doing implementation, you almost always need to do some form of development. The outcome of those developments should be the main path of evolution of the GRP.\n","description":"","tags":null,"title":"On Maintenance and Lifecycle in Self Service Government Systems","uri":"/post/on-maintenanace-in-self-service-system/"},{"categories":null,"content":"Create physical project with modern tools hasn’t change that much Almost 10 years ago, when I wanted to create with CnC and other motion systems, the Go To desktop tool was Aspire or VCarve.\nI tried many, many other tools : Carbide create, Inkscape, Kiri:Moto, Fusion 360 and, somehow, I’m back with Aspire.\nNot that Aspire is all I ever wanted, but I think you can stumble your way to understanding the software, as opposed to Fusion 360.\n","description":"","tags":null,"title":"Physical Project","uri":"/post/physical-project/"},{"categories":null,"content":"I used to whip up Django anytime I needed a quick web app. Frontend has gotten messy and complex so I don’t enjoy using it as part of my “move fast, test things” workflow.\nGood thing APIs are most everywhere and JSON can be used as a backend frontend now. Everybody speaks JSON, you get pretty output everywhere, you can beautify it and put it in plain text, you can easily rework it by hand or by code and the files are relatively small (compared to your XML of old).\nI dabble a lot in data and data processing so I keep using Python when I need to publish a simple script or a simple web service in my dev cycle.\nFlask, SQLite and click I find using Flask keep things light, readable and fast to develop. You add click on top of it and you can get a super quick and nice script with arguments, feedback, interactions.\nSQLite as the data store make for a great application file format or it is also pretty SQL complete so no roadblocks here. Back in the days (2007) you could do SELECT and INSERT but the funkiest of the SQL commands where not supported.\nSo I don’t need to learn new tools and can build on top of this simple yet flexible foundation.\nCSV and Excel This is a cluster fuck. Dat science is telling me to setup pipelines and workflows with Airflow and Kafka but I find this very time consuming and since I don’t have a specific end goal I don’t feel like this is worth my time.\nI’m interested in querying CSV as SQL because that would streamline my process, but I didn’t find anything Python, able to handle millions of CSV lines AND accept JOIN statements.\nI’ll definitely csvsql a try, but my JOIN requirement tells me I should suck it up and make an import script into SQLite. We’ll see.\nAs I write this I see SQLite has a .import function for CSV. Maybe something to test.\n","description":"","tags":null,"title":"Stack for Experiments","uri":"/post/stack-for-experiments/"},{"categories":null,"content":"Chasing the trend of trying to recapture what it was like to publish and do dev in the early 2000’s I’m giving Hugo a try.\nGitHub pages seems to be the perfect Geocities replacement and thus, this lives here.\nRight off the bat, things are different. Back in the days, you could conceivably open Notepad, or FrontPage and start building a page.\nBuilding in Hugo is not easier or different from any other moderns stack I know. Publishing seems a lot easier, mainly because there is no backend to worry about. Backend in the sense of a “dynamic backend” where a SQL database of some sort is involved.\nSo, took me about 5 hours of researching and testing things to get to place where I can publish. Didn’t hate the process, didn’t love it either.\nBeing able to write in VS Code or Notepad if I so choose is a nice touch. Being built on top of git is another one.\nMy current theme, Ed, is supposed to be geared towards publishing. Since I don’t intend to share much code here, I’m giving it a try.\nLet’s see if this stack makes me more likely to publish more and maybe even have something to say.\n","description":"","tags":null,"title":"A Static site, Hugo and Github","uri":"/post/hugo-github/"}]
